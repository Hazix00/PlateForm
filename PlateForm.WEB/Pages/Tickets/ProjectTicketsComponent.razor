@page "/tickets"
@page "/project/{projectId:int}/tickets"
@using System.Text
@using System.Threading

@inject ITicketsScreenUseCases ticketsScreenUseCases

<h3>@(projectId != null ? $"Project {projectId} Tasks" : "Tickets")</h3>

<br />
<div class="row">
    <div class="offset-4 col-auto">
        <div class="input-group">
            <input class="form-control" type="text" placeholder="Search"
                aria-label="Search" @oninput="Search">
            <button type="button" class="btn btn-primary">
                <i class="fas fa-search"></i>
            </button>
            <div class="form-check form-check-inline ml-2">
                <input type="checkbox" class="form-check-input" id="myticket" @bind-value="ViewMyTickets"/>
                <label class="form-check-label" for="myticket">View my tickets</label>
            </div>
        </div>
    </div>
</div>
<br />
@if (tickets != null)
{
    <table class="table">
      <thead>
        <tr>
            <td>Title</td>
            <td>Owner</td>
            <td>Description</td>
            <td>Report Date</td>
            <td>Due Date</td>
        </tr>
      </thead>
      <tbody>
          @foreach (Ticket ticket in tickets)
         {
            <tr>
                <td><NavLink href=@($"/tickets/{ticket.TicketId}")>@ticket.Title</NavLink></td>
                <td>@ticket.Owner</td>
                <td>@ticket.Description</td>
                <td>@ticket.ReportDate</td>
                <td>@ticket.DueDate</td>
            </tr> 
         }
      </tbody>
    </table>
}

@code {
    [Parameter]
    public int? projectId { get; set; }
    bool _viewMyTickets = false;
    public bool ViewMyTickets { 
        get => _viewMyTickets; 
        set
        {
            _viewMyTickets = value;
            Task.Run(async () =>
            {
                if (_viewMyTickets)
                {

                    tickets = await ticketsScreenUseCases.ViewOwnerTicketsAsync((int)projectId, "Hamza");
                }
                else
                {
                    tickets = await ticketsScreenUseCases.ViewTicketsAsync((int)projectId);
                }
                StateHasChanged();
            });
        }
    }
    CancellationTokenSource cancelToken = new();

    IEnumerable<Ticket> tickets;
    protected override async Task OnInitializedAsync()
    {
        tickets = await ticketsScreenUseCases.ViewTicketsAsync((int)projectId); 
    }

    async Task Search(ChangeEventArgs eventArgs)
    {
        var filter = eventArgs.Value.ToString();
        cancelToken.Cancel(); //Cancel the delay before request

        if (string.IsNullOrWhiteSpace(filter)) //if input is empty get the project tickets
        {
            tickets = await ticketsScreenUseCases.ViewTicketsAsync((int)projectId); 
            return;
        }
        
        //Start a new request after 700ms
        cancelToken = new(); 
        await Task.Delay(700, cancelToken.Token);

        tickets = await ticketsScreenUseCases.SearchTicketsAsync(filter);
    }

}
