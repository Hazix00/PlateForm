@page "/tickets/{ticketId:int}"
@page "/projects/{projectId:int}/addticket"
@inject ITicketsScreenUseCases ticketsScreenUseCases
@inject IProjectsScreenUseCases projectScreenUseCases
@inject NavigationManager navigationManager

<h3>Ticket</h3>

@if (ticket != null)
{
    <div class="row">
        <div class="col-md-6 m-md-auto">
            <EditForm EditContext="editContext" OnValidSubmit="Save">
                @if (descriptionEmpty)
                {
                    <AlertComponent @ref="alertComponent" ErrorMessage = "Descrition is required"></AlertComponent>
                }
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="title">Title<span style="color:red">*</span></label>
                    <InputText id="title" @bind-Value="ticket.Title" class="form-control" DisplayName="Title"/>
                </div>
                <div class="form-group">
                    <label for="Owner">Owner</label>
                    <InputText id="Owner" @bind-Value="ticket.Owner" class="form-control" DisplayName="Owner" readonly/>
                </div>
                <div class="form-group">
                    <label for="Description">Description<span style="color:red">*</span></label>
                    <InputText id="Description" @bind-Value="ticket.Description" class="form-control" DisplayName="Description"/>
                </div>
                <div class="form-group">
                    <label for="DueDate">Due Date</label>
                    <InputDate id="DueDate" @bind-Value="ticket.DueDate" class="form-control" DisplayName="DueDate"/>
                </div>
                <div class="form-group">
                    <label for="ReportDate">Report Date</label>
                    <InputDate id="ReportDate" @bind-Value="ticket.ReportDate" class="form-control" DisplayName="ReportDate"/>
                </div>
                <div class="d-flex justify-content">
                    <div class="col">
                        <button type="button" class="btn" @onclick="Back" >Cancel</button>
                    </div>
                    @if (ticketId != null)
                   {
                    <div class="col">
                        <button type="button" class="btn btn-danger" @onclick="Delete" >Delete</button>
                    </div>
                   }
                    <div class="col">
                        <button type="submit" class="btn btn-primary" disabled="@valuesUnchanged">Save changes</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

}

@code {
    [Parameter]
    public int? ticketId { get; set; }
    [Parameter]
    public int? projectId { get; set; }

    Ticket ticket;
    EditContext editContext;

    AlertComponent alertComponent;

    bool valuesUnchanged = true;
    bool descriptionEmpty = false;

    protected override async Task OnInitializedAsync()
    {
        if (ticketId == null) // Adding new Ticket to the current Project
        {
            try
            {
                var project = await projectScreenUseCases.ViewProjecttByIdAsync((int)projectId);
                if (project == null) throw new ArgumentNullException(); 
                ticket = new() { ProjectId = projectId };
            }
            catch
            {
                throw new Exception("Project not Found with the provided Id!");
            }

        }
        else if(projectId == null) // Updating existing Ticket
        {
            ticket = await ticketsScreenUseCases.ViewTicketByIdAsync((int)ticketId);
            if (ticket == null) return;
        }

        editContext = new EditContext(ticket);
        editContext.OnFieldChanged += EditContext_FieldChanged;
        base.OnInitialized();
    }

    private void EditContext_FieldChanged(object sender, FieldChangedEventArgs e)
    {
        valuesUnchanged = false;
    }

    private async Task Save()
    {
        descriptionEmpty = !ticket.ValidateDescription();
        StateHasChanged();

        if (descriptionEmpty) return;
        if(ticketId == null) // Adding
        {
            await ticketsScreenUseCases.AddTicketAsync(ticket);
        }
        else // Updating
        {
            await ticketsScreenUseCases.UpdateTicketAsync(ticket);
        }
        Back();
    }

    async Task Delete()
    {
        await ticketsScreenUseCases.DeleteTicketAsync((int)ticketId);
        Back();
    }

    void Back() => 
        navigationManager.NavigateTo($"/project/{ticket.ProjectId}/tickets");
}
